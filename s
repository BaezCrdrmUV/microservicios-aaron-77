[1mdiff --git a/.gitignore b/.gitignore[m
[1mdeleted file mode 100644[m
[1mindex f5fb4c1..0000000[m
[1m--- a/.gitignore[m
[1m+++ /dev/null[m
[36m@@ -1,361 +0,0 @@[m
[31m-### VisualStudio ###[m
[31m-## Ignore Visual Studio temporary files, build results, and[m
[31m-## files generated by popular Visual Studio add-ons.[m
[31m-##[m
[31m-## Get latest from https://github.com/github/gitignore/blob/master/VisualStudio.gitignore[m
[31m-[m
[31m-# User-specific files[m
[31m-*.rsuser[m
[31m-*.suo[m
[31m-*.user[m
[31m-*.userosscache[m
[31m-*.sln.docstates[m
[31m-[m
[31m-# User-specific files (MonoDevelop/Xamarin Studio)[m
[31m-*.userprefs[m
[31m-[m
[31m-# Mono auto generated files[m
[31m-mono_crash.*[m
[31m-[m
[31m-# Build results[m
[31m-[Dd]ebug/[m
[31m-[Dd]ebugPublic/[m
[31m-[Rr]elease/[m
[31m-[Rr]eleases/[m
[31m-x64/[m
[31m-x86/[m
[31m-[Aa][Rr][Mm]/[m
[31m-[Aa][Rr][Mm]64/[m
[31m-bld/[m
[31m-[Bb]in/[m
[31m-[Oo]bj/[m
[31m-[Ll]og/[m
[31m-[m
[31m-msbuild.log[m
[31m-msbuild.err[m
[31m-msbuild.wrn[m
[31m-[m
[31m-# Visual Studio 2015/2017 cache/options directory[m
[31m-.vs/[m
[31m-# Uncomment if you have tasks that create the project's static files in wwwroot[m
[31m-#wwwroot/[m
[31m-[m
[31m-# Visual Studio 2017 auto generated files[m
[31m-Generated\ Files/[m
[31m-[m
[31m-# MSTest test Results[m
[31m-[Tt]est[Rr]esult*/[m
[31m-[Bb]uild[Ll]og.*[m
[31m-[m
[31m-# NUnit[m
[31m-*.VisualState.xml[m
[31m-TestResult.xml[m
[31m-nunit-*.xml[m
[31m-[m
[31m-# Build Results of an ATL Project[m
[31m-[Dd]ebugPS/[m
[31m-[Rr]eleasePS/[m
[31m-dlldata.c[m
[31m-[m
[31m-# Benchmark Results[m
[31m-BenchmarkDotNet.Artifacts/[m
[31m-[m
[31m-# .NET Core[m
[31m-project.lock.json[m
[31m-project.fragment.lock.json[m
[31m-artifacts/[m
[31m-[m
[31m-# StyleCop[m
[31m-StyleCopReport.xml[m
[31m-[m
[31m-# Files built by Visual Studio[m
[31m-*_i.c[m
[31m-*_p.c[m
[31m-*_h.h[m
[31m-*.ilk[m
[31m-*.meta[m
[31m-*.obj[m
[31m-*.iobj[m
[31m-*.pch[m
[31m-*.pdb[m
[31m-*.ipdb[m
[31m-*.pgc[m
[31m-*.pgd[m
[31m-*.rsp[m
[31m-*.sbr[m
[31m-*.tlb[m
[31m-*.tli[m
[31m-*.tlh[m
[31m-*.tmp[m
[31m-*.tmp_proj[m
[31m-*_wpftmp.csproj[m
[31m-*.log[m
[31m-*.vspscc[m
[31m-*.vssscc[m
[31m-.builds[m
[31m-*.pidb[m
[31m-*.svclog[m
[31m-*.scc[m
[31m-[m
[31m-# Chutzpah Test files[m
[31m-_Chutzpah*[m
[31m-[m
[31m-# Visual C++ cache files[m
[31m-ipch/[m
[31m-*.aps[m
[31m-*.ncb[m
[31m-*.opendb[m
[31m-*.opensdf[m
[31m-*.sdf[m
[31m-*.cachefile[m
[31m-*.VC.db[m
[31m-*.VC.VC.opendb[m
[31m-[m
[31m-# Visual Studio profiler[m
[31m-*.psess[m
[31m-*.vsp[m
[31m-*.vspx[m
[31m-*.sap[m
[31m-[m
[31m-# Visual Studio Trace Files[m
[31m-*.e2e[m
[31m-[m
[31m-# TFS 2012 Local Workspace[m
[31m-$tf/[m
[31m-[m
[31m-# Guidance Automation Toolkit[m
[31m-*.gpState[m
[31m-[m
[31m-# ReSharper is a .NET coding add-in[m
[31m-_ReSharper*/[m
[31m-*.[Rr]e[Ss]harper[m
[31m-*.DotSettings.user[m
[31m-[m
[31m-# JustCode is a .NET coding add-in[m
[31m-.JustCode[m
[31m-[m
[31m-# TeamCity is a build add-in[m
[31m-_TeamCity*[m
[31m-[m
[31m-# DotCover is a Code Coverage Tool[m
[31m-*.dotCover[m
[31m-[m
[31m-# AxoCover is a Code Coverage Tool[m
[31m-.axoCover/*[m
[31m-!.axoCover/settings.json[m
[31m-[m
[31m-# Visual Studio code coverage results[m
[31m-*.coverage[m
[31m-*.coveragexml[m
[31m-[m
[31m-# NCrunch[m
[31m-_NCrunch_*[m
[31m-.*crunch*.local.xml[m
[31m-nCrunchTemp_*[m
[31m-[m
[31m-# MightyMoose[m
[31m-*.mm.*[m
[31m-AutoTest.Net/[m
[31m-[m
[31m-# Web workbench (sass)[m
[31m-.sass-cache/[m
[31m-[m
[31m-# Installshield output folder[m
[31m-[Ee]xpress/[m
[31m-[m
[31m-# DocProject is a documentation generator add-in[m
[31m-DocProject/buildhelp/[m
[31m-DocProject/Help/*.HxT[m
[31m-DocProject/Help/*.HxC[m
[31m-DocProject/Help/*.hhc[m
[31m-DocProject/Help/*.hhk[m
[31m-DocProject/Help/*.hhp[m
[31m-DocProject/Help/Html2[m
[31m-DocProject/Help/html[m
[31m-[m
[31m-# Click-Once directory[m
[31m-publish/[m
[31m-[m
[31m-# Publish Web Output[m
[31m-*.[Pp]ublish.xml[m
[31m-*.azurePubxml[m
[31m-# Note: Comment the next line if you want to checkin your web deploy settings,[m
[31m-# but database connection strings (with potential passwords) will be unencrypted[m
[31m-*.pubxml[m
[31m-*.publishproj[m
[31m-[m
[31m-# Microsoft Azure Web App publish settings. Comment the next line if you want to[m
[31m-# checkin your Azure Web App publish settings, but sensitive information contained[m
[31m-# in these scripts will be unencrypted[m
[31m-PublishScripts/[m
[31m-[m
[31m-# NuGet Packages[m
[31m-*.nupkg[m
[31m-# NuGet Symbol Packages[m
[31m-*.snupkg[m
[31m-# The packages folder can be ignored because of Package Restore[m
[31m-**/[Pp]ackages/*[m
[31m-# except build/, which is used as an MSBuild target.[m
[31m-!**/[Pp]ackages/build/[m
[31m-# Uncomment if necessary however generally it will be regenerated when needed[m
[31m-#!**/[Pp]ackages/repositories.config[m
[31m-# NuGet v3's project.json files produces more ignorable files[m
[31m-*.nuget.props[m
[31m-*.nuget.targets[m
[31m-[m
[31m-# Microsoft Azure Build Output[m
[31m-csx/[m
[31m-*.build.csdef[m
[31m-[m
[31m-# Microsoft Azure Emulator[m
[31m-ecf/[m
[31m-rcf/[m
[31m-[m
[31m-# Windows Store app package directories and files[m
[31m-AppPackages/[m
[31m-BundleArtifacts/[m
[31m-Package.StoreAssociation.xml[m
[31m-_pkginfo.txt[m
[31m-*.appx[m
[31m-*.appxbundle[m
[31m-*.appxupload[m
[31m-[m
[31m-# Visual Studio cache files[m
[31m-# files ending in .cache can be ignored[m
[31m-*.[Cc]ache[m
[31m-# but keep track of directories ending in .cache[m
[31m-!?*.[Cc]ache/[m
[31m-[m
[31m-# Others[m
[31m-ClientBin/[m
[31m-~$*[m
[31m-*~[m
[31m-*.dbmdl[m
[31m-*.dbproj.schemaview[m
[31m-*.jfm[m
[31m-*.pfx[m
[31m-*.publishsettings[m
[31m-orleans.codegen.cs[m
[31m-[m
[31m-# Including strong name files can present a security risk[m
[31m-# (https://github.com/github/gitignore/pull/2483#issue-259490424)[m
[31m-#*.snk[m
[31m-[m
[31m-# Since there are multiple workflows, uncomment next line to ignore bower_components[m
[31m-# (https://github.com/github/gitignore/pull/1529#issuecomment-104372622)[m
[31m-#bower_components/[m
[31m-[m
[31m-# RIA/Silverlight projects[m
[31m-Generated_Code/[m
[31m-[m
[31m-# Backup & report files from converting an old project file[m
[31m-# to a newer Visual Studio version. Backup files are not needed,[m
[31m-# because we have git ;-)[m
[31m-_UpgradeReport_Files/[m
[31m-Backup*/[m
[31m-UpgradeLog*.XML[m
[31m-UpgradeLog*.htm[m
[31m-ServiceFabricBackup/[m
[31m-*.rptproj.bak[m
[31m-[m
[31m-# SQL Server files[m
[31m-*.mdf[m
[31m-*.ldf[m
[31m-*.ndf[m
[31m-[m
[31m-# Business Intelligence projects[m
[31m-*.rdl.data[m
[31m-*.bim.layout[m
[31m-*.bim_*.settings[m
[31m-*.rptproj.rsuser[m
[31m-*- [Bb]ackup.rdl[m
[31m-*- [Bb]ackup ([0-9]).rdl[m
[31m-*- [Bb]ackup ([0-9][0-9]).rdl[m
[31m-[m
[31m-# Microsoft Fakes[m
[31m-FakesAssemblies/[m
[31m-[m
[31m-# GhostDoc plugin setting file[m
[31m-*.GhostDoc.xml[m
[31m-[m
[31m-# Node.js Tools for Visual Studio[m
[31m-.ntvs_analysis.dat[m
[31m-node_modules/[m
[31m-[m
[31m-# Visual Studio 6 build log[m
[31m-*.plg[m
[31m-[m
[31m-# Visual Studio 6 workspace options file[m
[31m-*.opt[m
[31m-[m
[31m-# Visual Studio 6 auto-generated workspace file (contains which files were open etc.)[m
[31m-*.vbw[m
[31m-[m
[31m-# Visual Studio LightSwitch build output[m
[31m-**/*.HTMLClient/GeneratedArtifacts[m
[31m-**/*.DesktopClient/GeneratedArtifacts[m
[31m-**/*.DesktopClient/ModelManifest.xml[m
[31m-**/*.Server/GeneratedArtifacts[m
[31m-**/*.Server/ModelManifest.xml[m
[31m-_Pvt_Extensions[m
[31m-[m
[31m-# Paket dependency manager[m
[31m-.paket/paket.exe[m
[31m-paket-files/[m
[31m-[m
[31m-# FAKE - F# Make[m
[31m-.fake/[m
[31m-[m
[31m-# CodeRush personal settings[m
[31m-.cr/personal[m
[31m-[m
[31m-# Python Tools for Visual Studio (PTVS)[m
[31m-__pycache__/[m
[31m-*.pyc[m
[31m-[m
[31m-# Cake - Uncomment if you are using it[m
[31m-# tools/**[m
[31m-# !tools/packages.config[m
[31m-[m
[31m-# Tabs Studio[m
[31m-*.tss[m
[31m-[m
[31m-# Telerik's JustMock configuration file[m
[31m-*.jmconfig[m
[31m-[m
[31m-# BizTalk build output[m
[31m-*.btp.cs[m
[31m-*.btm.cs[m
[31m-*.odx.cs[m
[31m-*.xsd.cs[m
[31m-[m
[31m-# OpenCover UI analysis results[m
[31m-OpenCover/[m
[31m-[m
[31m-# Azure Stream Analytics local run output[m
[31m-ASALocalRun/[m
[31m-[m
[31m-# MSBuild Binary and Structured Log[m
[31m-*.binlog[m
[31m-[m
[31m-# NVidia Nsight GPU debugger configuration file[m
[31m-*.nvuser[m
[31m-[m
[31m-# MFractors (Xamarin productivity tool) working folder[m
[31m-.mfractor/[m
[31m-[m
[31m-# Local History for Visual Studio[m
[31m-.localhistory/[m
[31m-[m
[31m-# BeatPulse healthcheck temp database[m
[31m-healthchecksdb[m
[31m-[m
[31m-# Backup folder for Package Reference Convert tool in Visual Studio 2017[m
[31m-MigrationBackup/[m
[31m-[m
[31m-# End of https://www.gitignore.io/api/visualstudio[m
[31m-[m
[31m-# Visual Studio Code[m
[31m-.vscode[m
[31m-*.swp[m
[31m-.DS_Store[m
\ No newline at end of file[m
[1mdiff --git a/Controllers/ComprasController.cs b/Controllers/ComprasController.cs[m
[1mdeleted file mode 100644[m
[1mindex e64c6b5..0000000[m
[1m--- a/Controllers/ComprasController.cs[m
[1m+++ /dev/null[m
[36m@@ -1,136 +0,0 @@[m
[31m-using System;[m
[31m-using System.Collections.Generic;[m
[31m-using System.Linq;[m
[31m-using System.Threading.Tasks;[m
[31m-using Microsoft.AspNetCore.Mvc;[m
[31m-using Microsoft.EntityFrameworkCore;[m
[31m-using Microsoft.Extensions.Logging;[m
[31m-using MSCompras.Models;[m
[31m-[m
[31m-namespace MSInventario.Controllers[m
[31m-{[m
[31m-    [ApiController][m
[31m-    [Route("[controller]")][m
[31m-    public class ComprasController : ControllerBase[m
[31m-    {[m
[31m-        comprasContext dbContext;[m
[31m-[m
[31m-        private readonly ILogger<ComprasController> _logger;[m
[31m-[m
[31m-        public ComprasController(ILogger<ComprasController> logger)[m
[31m-        {[m
[31m-            _logger = logger;[m
[31m-            dbContext = new comprasContext();[m
[31m-        }[m
[31m-[m
[31m-        [HttpGet("buscar")][m
[31m-        public async Task<ActionResult<Compra>> Get([FromQuery]int CompraId = -1)[m
[31m-        {[m
[31m-            List<Compra> Compras = null;[m
[31m-[m
[31m-            Compras = await dbContext.Compras[m
[31m-                .Where(p => (CompraId >= 0 && p.Id == CompraId) || [m
[31m-                    (CompraId < 0 && p.Id != CompraId))[m
[31m-                .ToListAsync();[m
[31m-            if(Compras == null) return BadRequest();[m
[31m-            else return Ok(Compras);[m
[31m-        }[m
[31m-[m
[31m-        [HttpGet("detalles/{id}")][m
[31m-        public async Task<ActionResult<Compra>> GetDetails(int id)[m
[31m-        {[m
[31m-            Compra compra = await dbContext.Compras[m
[31m-                .Where(p => p.Id == id)[m
[31m-                .Include(r => r.ProductosCompras)[m
[31m-                .FirstOrDefaultAsync();[m
[31m-            if(compra != null)[m
[31m-            {[m
[31m-                foreach (var item in compra.ProductosCompras)[m
[31m-                {[m
[31m-                    item.IdCompraNavigation = null;[m
[31m-                }[m
[31m-                return Ok(compra);[m
[31m-            } else return BadRequest("No existe compra"); // Lo ideal es que regresara un objeto de error[m
[31m-        }[m
[31m-[m
[31m-        [HttpPost("nuevo")][m
[31m-        public async Task<ActionResult<Compra>> Add([FromBody]Compra Compra)[m
[31m-        {[m
[31m-            if(Compra == null)[m
[31m-            {[m
[31m-                _logger.LogError("Body es null");[m
[31m-                return BadRequest("Body es null");[m
[31m-            }[m
[31m-[m
[31m-            try[m
[31m-            {[m
[31m-                dbContext.Entry(Compra).State = EntityState.Added;[m
[31m-                await dbContext.SaveChangesAsync();[m
[31m-[m
[31m-                _logger.LogInformation("Se agregó nuevo Compra: {0}", Compra.Id);[m
[31m-                return Created("", Compra);[m
[31m-            }[m
[31m-            catch (Exception ex)[m
[31m-            {[m
[31m-                _logger.LogError("Ocurrió una excepción:\n" + ex.Message);[m
[31m-                return BadRequest();[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        [HttpPost("nuevo/detalle/{idCompra}")][m
[31m-        public async Task<ActionResult<Compra>> AddDetails([FromBody]ProductosCompra[] productos, int idCompra = -1)[m
[31m-        {[m
[31m-            if(idCompra < 0) return BadRequest("ID necesario");[m
[31m-            if(productos == null || productos.Count() == 0) return BadRequest();[m
[31m-[m
[31m-            try[m
[31m-            {[m
[31m-                foreach (ProductosCompra producto in productos)[m
[31m-                {[m
[31m-                    dbContext.Entry(producto).State = EntityState.Added;   [m
[31m-                }[m
[31m-                await dbContext.SaveChangesAsync();[m
[31m-                return Created("", productos);[m
[31m-            }[m
[31m-            catch (Exception ex)[m
[31m-            {[m
[31m-                _logger.LogError("Ocurrió una excepción:\n" + ex.Message);[m
[31m-                return BadRequest(ex);[m
[31m-            }[m
[31m-        }[m
[31m-[m
[31m-        [HttpPut("actualizar/{id}")][m
[31m-        public async Task<ActionResult<Compra>> Update(int id, [FromBody]Compra Compra)[m
[31m-        {[m
[31m-            if(Compra == null)[m
[31m-            {[m
[31m-                _logger.LogError("Body es null");[m
[31m-                return BadRequest("Body es null");[m
[31m-            }[m
[31m-[m
[31m-            try[m
[31m-            {[m
[31m-                dbContext.Entry(Compra).State = EntityState.Modified;[m
[31m-                await dbContext.SaveChangesAsync();[m
[31m-[m
[31m-                _logger.LogInformation("Se actualizó Compra: {0}", Compra.Id);[m
[31m-                return Ok(Compra);[m
[31m-            }[m
[31m-            catch(DbUpdateConcurrencyException dbex)[m
[31m-            {[m
[31m-                var item = await dbContext.Compras.FirstOrDefaultAsync(p => p.Id == id);[m
[31m-                if(item == null)[m
[31m-                {[m
[31m-                    _logger.LogDebug("No se encontró un Compra con ID {0}", id.ToString());[m
[31m-                    _logger.LogError("Ocurrió una excepción:\n" + dbex.Message);[m
[31m-                    return NotFound();[m
[31m-                } else return BadRequest();[m
[31m-            }[m
[31m-            catch (Exception ex)[m
[31m-            {[m
[31m-                _logger.LogError("Ocurrió una excepción:\n" + ex.Message);[m
[31m-                return BadRequest(ex);[m
[31m-            }[m
[31m-        }[m
[31m-    }[m
[31m-}[m
[1mdiff --git a/Dockerfile b/Dockerfile[m
[1mdeleted file mode 100644[m
[1mindex ae6bfaf..0000000[m
[1m--- a/Dockerfile[m
[1m+++ /dev/null[m
[36m@@ -1,20 +0,0 @@[m
[31m-FROM mcr.microsoft.com/dotnet/aspnet:5.0-buster-slim AS base[m
[31m-WORKDIR /app[m
[31m-EXPOSE 80[m
[31m-EXPOSE 443[m
[31m-[m
[31m-FROM mcr.microsoft.com/dotnet/sdk:5.0-buster-slim AS build[m
[31m-WORKDIR /src[m
[31m-COPY ["MSCompras.csproj", "./"][m
[31m-RUN dotnet restore "MSCompras.csproj"[m
[31m-COPY . .[m
[31m-WORKDIR "/src/"[m
[31m-RUN dotnet build "MSCompras.csproj" -c Release -o /app/build[m
[31m-[m
[31m-FROM build AS publish[m
[31m-RUN dotnet publish "MSCompras.csproj" -c Release -o /app/publish[m
[31m-[m
[31m-FROM base AS final[m
